# -*- coding: utf-8 -*-
"""writerAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jxk60sF0SSZyDCKcxaoSU-yJtPQseCaJ
"""

!pip install --upgrade openai

!pip install openai==0.27.0

!pip install openai

!pip install streamlit

import streamlit as st
import openai

# Set your OpenAI API key
openai.api_key = "your_api_Key"  # Replace with your actual API key

# Function to create the customized prompt
def generate_customized_prompt(content_type, theme, characters=None, tone="creative", format_requirements=None, word_count=None, special_instructions=None):
    prompt = f"You are an expert writer who crafts {content_type} with high creativity and originality. "
    prompt += f"The theme is '{theme}'. "

    if characters:
        prompt += f"Characters include: {characters}. "
    if word_count:
        prompt += f"The piece should be around {word_count} words. "
    if tone:
        prompt += f"Maintain a {tone} tone throughout. "
    if format_requirements:
        prompt += f"Ensure the following formatting: {format_requirements}. "
    if special_instructions:
        prompt += f"Special instructions: {special_instructions}. "

    prompt += "Start writing now and ensure the output is unique and engaging."
    return prompt

# Function to call OpenAI API
def generate_content(prompt, max_tokens=750):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are an advanced writing assistant."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.7,
            top_p=1.0,
            frequency_penalty=0.5,
            presence_penalty=0.3
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        return f"An error occurred: {str(e)}"

# Streamlit UI layout
st.title("Dynamic AI Writing Tool")
st.write("Generate customized content based on user input. Create poems, stories, speeches, and more!")

# Collect user inputs
content_type = st.text_input("Content Type (e.g., 'poem', 'story')")
theme = st.text_input("Theme (e.g., 'farewell for a mentor')")
characters = st.text_input("Characters (optional)")
tone = st.text_input("Tone (e.g., 'appreciative', 'humorous')")
format_requirements = st.text_input("Format Requirements (e.g., 'Each line starts with a letter spelling XYZ')")
word_count = st.number_input("Word Count (optional)", min_value=1, step=1, value=100)
special_instructions = st.text_area("Special Instructions (optional)")

# Generate content button
if st.button("Generate Content"):
    if content_type and theme:
        prompt = generate_customized_prompt(
            content_type=content_type,
            theme=theme,
            characters=characters,
            tone=tone,
            format_requirements=format_requirements,
            word_count=int(word_count) if word_count else None,
            special_instructions=special_instructions
        )
        result = generate_content(prompt)
        st.write("### Generated Content:")
        st.write(result)
    else:
        st.warning("Please fill in at least the content type and theme.")

# Run the app using `streamlit run app.py`

